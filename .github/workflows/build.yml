name: Build and Release Executables

on:
  push:
    tags:
      - v*  # 当推送带有v前缀的标签时触发工作流
  workflow_dispatch:  # 手动触发工作流

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            extension: ""
          - os: windows-latest
            extension: .exe

    steps:
      # 检出代码仓库
      - name: Checkout code
        uses: actions/checkout@v2
      
      # 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x  # 您需要的Python版本

      # 安装依赖项（如果有）
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 安装pyminifier
      - name: Install pyminifier
        run: pip install pyminifier

      # 精简代码
      - name: Pyminifier
        run: pyminifier --gzip --nonlatin --obfuscate --outfile min_per_station_data.py per_station_data.py

      # 安装 PyInstaller
      - name: Install PyInstaller
        run: pip install pyinstaller

      # 打包为可执行文件
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --strip --clean  per_station_data.py

      # 上传生成的二进制文件为GitHub的artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: ./dist/main${{ matrix.extension }}

  release:
    needs: build  # 等待build任务完成
    runs-on: ubuntu-latest
    steps:
      # 创建GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub提供的身份验证令牌
        with:
          tag_name: ${{ github.ref }}  # 使用推送的标签作为发布的版本号
          release_name: Release ${{ github.ref }}  # 发布的名称
          draft: false
          prerelease: false

      # 上传Linux版本到Release
      - name: Upload Linux asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main
          asset_name: main-linux
          asset_content_type: application/octet-stream

      # 上传Windows版本到Release
      - name: Upload Windows asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main.exe
          asset_name: main-windows.exe
          asset_content_type: application/octet-stream
